
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000540  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000540  000005d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800066  00800066  000005da  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000094  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002f3  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015c  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e0  00000000  00000000  00000add  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000153  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000074  00000000  00000000  00000f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000fe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a6 e6       	ldi	r26, 0x66	; 102
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 38       	cpi	r26, 0x80	; 128
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e0 e4       	ldi	r30, 0x40	; 64
  78:	f5 e0       	ldi	r31, 0x05	; 5
  7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
  86:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  8a:	0c 94 9e 02 	jmp	0x53c	; 0x53c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <press>:
	}
}

void press(void)
{
	PORTB ^= (1<<PINB1);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	92 e0       	ldi	r25, 0x02	; 2
  96:	89 27       	eor	r24, r25
  98:	88 bb       	out	0x18, r24	; 24
	if(startDataStream)
  9a:	80 91 6a 00 	lds	r24, 0x006A
  9e:	90 91 6b 00 	lds	r25, 0x006B
  a2:	89 2b       	or	r24, r25
  a4:	61 f0       	breq	.+24     	; 0xbe <press+0x2c>
	}
}

void sendChar(char data)
{
	while(! (UCSRA & (1 << UDRE)) );	//Wait for UART controller to be ready
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <press+0x14>
	UDR = data;
  aa:	1c b8       	out	0x0c, r1	; 12
	}
}

void sendChar(char data)
{
	while(! (UCSRA & (1 << UDRE)) );	//Wait for UART controller to be ready
  ac:	5d 9b       	sbis	0x0b, 5	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <press+0x1a>
	UDR = data;
  b0:	1c b8       	out	0x0c, r1	; 12
	}
}

void sendChar(char data)
{
	while(! (UCSRA & (1 << UDRE)) );	//Wait for UART controller to be ready
  b2:	5d 9b       	sbis	0x0b, 5	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <press+0x20>
	UDR = data;
  b6:	1c b8       	out	0x0c, r1	; 12
	}
}

void sendChar(char data)
{
	while(! (UCSRA & (1 << UDRE)) );	//Wait for UART controller to be ready
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <press+0x26>
	UDR = data;
  bc:	1c b8       	out	0x0c, r1	; 12
  be:	08 95       	ret

000000c0 <sendChar>:
	}
}

void sendChar(char data)
{
	while(! (UCSRA & (1 << UDRE)) );	//Wait for UART controller to be ready
  c0:	5d 9b       	sbis	0x0b, 5	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <sendChar>
	UDR = data;
  c4:	8c b9       	out	0x0c, r24	; 12
}
  c6:	08 95       	ret

000000c8 <sendString>:

void sendString(char* data)
{
  c8:	fc 01       	movw	r30, r24
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <sendString+0xc>
	int i = 0;
	while(data[i] != '\0')
	{
		while(! (UCSRA & (1 << UDRE)) );	//Wait for UART controller to be ready
  cc:	5d 9b       	sbis	0x0b, 5	; 11
  ce:	fe cf       	rjmp	.-4      	; 0xcc <sendString+0x4>
		UDR = data[i];
  d0:	8c b9       	out	0x0c, r24	; 12
  d2:	31 96       	adiw	r30, 0x01	; 1
}

void sendString(char* data)
{
	int i = 0;
	while(data[i] != '\0')
  d4:	80 81       	ld	r24, Z
  d6:	88 23       	and	r24, r24
  d8:	c9 f7       	brne	.-14     	; 0xcc <sendString+0x4>
	{
		while(! (UCSRA & (1 << UDRE)) );	//Wait for UART controller to be ready
		UDR = data[i];
		i++;
	}
}
  da:	08 95       	ret

000000dc <sendString_l>:

void sendString_l(char* data, int length)
{
  dc:	ac 01       	movw	r20, r24
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	09 c0       	rjmp	.+18     	; 0xf6 <sendString_l+0x1a>
	int i = 0;
	while(i<length)
	{
		while(! (UCSRA & (1 << UDRE)) );	//Wait for UART controller to be ready
  e4:	5d 9b       	sbis	0x0b, 5	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <sendString_l+0x8>
		UDR = data[i];
  e8:	fa 01       	movw	r30, r20
  ea:	e2 0f       	add	r30, r18
  ec:	f3 1f       	adc	r31, r19
  ee:	80 81       	ld	r24, Z
  f0:	8c b9       	out	0x0c, r24	; 12
		i++;
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
}

void sendString_l(char* data, int length)
{
	int i = 0;
	while(i<length)
  f6:	26 17       	cp	r18, r22
  f8:	37 07       	cpc	r19, r23
  fa:	a4 f3       	brlt	.-24     	; 0xe4 <sendString_l+0x8>
	{
		while(! (UCSRA & (1 << UDRE)) );	//Wait for UART controller to be ready
		UDR = data[i];
		i++;
	}
  fc:	08 95       	ret

000000fe <main>:
char naTime[4];
int startDataStream = 0;
char *DataStream = NULL;

int main(void)
{
  fe:	2f 92       	push	r2
 100:	3f 92       	push	r3
 102:	4f 92       	push	r4
 104:	5f 92       	push	r5
 106:	6f 92       	push	r6
 108:	7f 92       	push	r7
 10a:	8f 92       	push	r8
 10c:	9f 92       	push	r9
 10e:	af 92       	push	r10
 110:	bf 92       	push	r11
 112:	cf 92       	push	r12
 114:	df 92       	push	r13
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
	//Configure the ADC
	ADCSRA |= 1<<ADPS2;
 122:	32 9a       	sbi	0x06, 2	; 6
	ADMUX |= 1<<ADLAR;
 124:	3d 9a       	sbi	0x07, 5	; 7
	ADCSRA |= 1<<ADEN;
 126:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= 1<<ADSC;
 128:	36 9a       	sbi	0x06, 6	; 6
	
	TCCR1B |= 1<<CS10;
 12a:	8e b5       	in	r24, 0x2e	; 46
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	8e bd       	out	0x2e, r24	; 46
	
	//Set LED pins for output and turn off the leds
	DDRB |= 1<<PINB1 | 1<<PINB2;
 130:	87 b3       	in	r24, 0x17	; 23
 132:	86 60       	ori	r24, 0x06	; 6
 134:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<PINB1 | 1<<PINB2);
 136:	88 b3       	in	r24, 0x18	; 24
 138:	89 7f       	andi	r24, 0xF9	; 249
 13a:	88 bb       	out	0x18, r24	; 24
	
	//Initialization of Button and debouncing variables
	DDRB &= ~(1<<PINB0);
 13c:	b8 98       	cbi	0x17, 0	; 23
	PORTB |= 1<<PINB0;
 13e:	c0 9a       	sbi	0x18, 0	; 24
	int Pressed_Confidence_Level = 0;
	int Released_Confidence_Level = 0;
	//char adcResult[5];
	
	//UART Specifications(Parity,stop bits, data bit length)
	UCSRC &= ~(1 << UMSEL);
 140:	80 b5       	in	r24, 0x20	; 32
 142:	8f 7b       	andi	r24, 0xBF	; 191
 144:	80 bd       	out	0x20, r24	; 32
	
	int UBRR = 12; //9600bps
	
	UBRRH &= ~(1 << URSEL);
 146:	80 b5       	in	r24, 0x20	; 32
 148:	8f 77       	andi	r24, 0x7F	; 127
 14a:	80 bd       	out	0x20, r24	; 32
	//Put the upper part of the baud number here (bits 8 to 11)
	UBRRH = (unsigned char) (UBRR >> 8);
 14c:	10 bc       	out	0x20, r1	; 32

	//Put the remaining part of the baud number here
	UBRRL = (unsigned char) UBRR; 
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver and transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN);
 152:	88 e1       	ldi	r24, 0x18	; 24
 154:	8a b9       	out	0x0a, r24	; 10

	//Set frame format to 8 data bits, no parity, 1 stop bit
	UCSRC = (1 << URSEL) | (0 << USBS) | (3 << UCSZ0);
 156:	86 e8       	ldi	r24, 0x86	; 134
 158:	80 bd       	out	0x20, r24	; 32
	
	UCSRA = (1 << U2X);
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	8b b9       	out	0x0b, r24	; 11
	unsigned int Counter = 0;
	unsigned int lastCounter = 0;
	int channel = 0;
	int SpaceAllocated = 1050;
	int BitsWritten = 0;
	DataStream = malloc(SpaceAllocated);
 15e:	8a e1       	ldi	r24, 0x1A	; 26
 160:	94 e0       	ldi	r25, 0x04	; 4
 162:	0e 94 99 01 	call	0x332	; 0x332 <malloc>
 166:	80 93 6c 00 	sts	0x006C, r24
 16a:	90 93 6d 00 	sts	0x006D, r25
 16e:	cc 24       	eor	r12, r12
 170:	dd 24       	eor	r13, r13
 172:	aa 24       	eor	r10, r10
 174:	bb 24       	eor	r11, r11
 176:	00 e0       	ldi	r16, 0x00	; 0
 178:	10 e0       	ldi	r17, 0x00	; 0
 17a:	88 24       	eor	r8, r8
 17c:	99 24       	eor	r9, r9
 17e:	66 24       	eor	r6, r6
 180:	77 24       	eor	r7, r7
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	d0 e0       	ldi	r29, 0x00	; 0
				//itoa(nTime, sTime, 10);
				//sendString(sTime);		//Time
				//sendChar(nTime);
				for(int i=0;i<4;i++)
				{
					naTime[i] = (nTime & (0x000000FFUL<<(i*8))) >> (i*8);
 186:	3f ef       	ldi	r19, 0xFF	; 255
 188:	23 2e       	mov	r2, r19
 18a:	31 2c       	mov	r3, r1
 18c:	41 2c       	mov	r4, r1
 18e:	51 2c       	mov	r5, r1
 190:	06 c0       	rjmp	.+12     	; 0x19e <main+0xa0>
	unsigned int Counter = 0;
	unsigned int lastCounter = 0;
	int channel = 0;
	int SpaceAllocated = 1050;
	int BitsWritten = 0;
	DataStream = malloc(SpaceAllocated);
 192:	cc 24       	eor	r12, r12
 194:	dd 24       	eor	r13, r13
 196:	66 24       	eor	r6, r6
 198:	77 24       	eor	r7, r7
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1)
	{
		if(TCNT1 > 10000)
 19e:	8c b5       	in	r24, 0x2c	; 44
 1a0:	9d b5       	in	r25, 0x2d	; 45
 1a2:	81 51       	subi	r24, 0x11	; 17
 1a4:	97 42       	sbci	r25, 0x27	; 39
 1a6:	f8 f0       	brcs	.+62     	; 0x1e6 <main+0xe8>
		{
			TCNT1 = 0;
 1a8:	1d bc       	out	0x2d, r1	; 45
 1aa:	1c bc       	out	0x2c, r1	; 44
			nTime ++;
 1ac:	80 91 66 00 	lds	r24, 0x0066
 1b0:	90 91 67 00 	lds	r25, 0x0067
 1b4:	a0 91 68 00 	lds	r26, 0x0068
 1b8:	b0 91 69 00 	lds	r27, 0x0069
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	a1 1d       	adc	r26, r1
 1c0:	b1 1d       	adc	r27, r1
 1c2:	80 93 66 00 	sts	0x0066, r24
 1c6:	90 93 67 00 	sts	0x0067, r25
 1ca:	a0 93 68 00 	sts	0x0068, r26
 1ce:	b0 93 69 00 	sts	0x0069, r27
			Counter++;
 1d2:	08 94       	sec
 1d4:	a1 1c       	adc	r10, r1
 1d6:	b1 1c       	adc	r11, r1
			if(Counter>10000)
 1d8:	81 e1       	ldi	r24, 0x11	; 17
 1da:	a8 16       	cp	r10, r24
 1dc:	87 e2       	ldi	r24, 0x27	; 39
 1de:	b8 06       	cpc	r11, r24
 1e0:	10 f0       	brcs	.+4      	; 0x1e6 <main+0xe8>
 1e2:	aa 24       	eor	r10, r10
 1e4:	bb 24       	eor	r11, r11
			{
				Counter = 0;
			}
		}
		
		if (UCSRA & (1 << RXC)) {
 1e6:	5f 9b       	sbis	0x0b, 7	; 11
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <main+0xfc>
			receiveData = UDR;
 1ea:	8c b1       	in	r24, 0x0c	; 12
			//sendChar(receiveData);
			if (receiveData == 'a') PORTB |= (1<<PINB2);
 1ec:	81 36       	cpi	r24, 0x61	; 97
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <main+0xf6>
 1f0:	c2 9a       	sbi	0x18, 2	; 24
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <main+0xfc>
			else if (receiveData == 'b') PORTB &= ~(1<<PINB2);
 1f4:	82 36       	cpi	r24, 0x62	; 98
 1f6:	09 f4       	brne	.+2      	; 0x1fa <main+0xfc>
 1f8:	c2 98       	cbi	0x18, 2	; 24
		}
		
		if ((ADCSRA & (1 << ADIF)) && Counter%4 == 0 && lastCounter != Counter && startDataStream) {
 1fa:	34 9b       	sbis	0x06, 4	; 6
 1fc:	61 c0       	rjmp	.+194    	; 0x2c0 <main+0x1c2>
 1fe:	c5 01       	movw	r24, r10
 200:	83 70       	andi	r24, 0x03	; 3
 202:	90 70       	andi	r25, 0x00	; 0
 204:	89 2b       	or	r24, r25
 206:	09 f0       	breq	.+2      	; 0x20a <main+0x10c>
 208:	5b c0       	rjmp	.+182    	; 0x2c0 <main+0x1c2>
 20a:	0a 15       	cp	r16, r10
 20c:	1b 05       	cpc	r17, r11
 20e:	09 f4       	brne	.+2      	; 0x212 <main+0x114>
 210:	57 c0       	rjmp	.+174    	; 0x2c0 <main+0x1c2>
 212:	80 91 6a 00 	lds	r24, 0x006A
 216:	90 91 6b 00 	lds	r25, 0x006B
 21a:	89 2b       	or	r24, r25
 21c:	09 f4       	brne	.+2      	; 0x220 <main+0x122>
 21e:	50 c0       	rjmp	.+160    	; 0x2c0 <main+0x1c2>
			//itoa(ADCH, adcResult, 10);
			//sendChar('(');
			//sendChar(channel+88);
			//sendChar(')');
			//sendString(adcResult);
			sendChar(ADCH);
 220:	85 b1       	in	r24, 0x05	; 5
	}
}

void sendChar(char data)
{
	while(! (UCSRA & (1 << UDRE)) );	//Wait for UART controller to be ready
 222:	5d 9b       	sbis	0x0b, 5	; 11
 224:	fe cf       	rjmp	.-4      	; 0x222 <main+0x124>
	UDR = data;
 226:	8c b9       	out	0x0c, r24	; 12
			//sendChar(channel+88);
			//sendChar(')');
			//sendString(adcResult);
			sendChar(ADCH);
			//sendChar(',');
			if(channel==2)
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	89 16       	cp	r8, r25
 22c:	91 04       	cpc	r9, r1
 22e:	71 f5       	brne	.+92     	; 0x28c <main+0x18e>
				//itoa(nTime, sTime, 10);
				//sendString(sTime);		//Time
				//sendChar(nTime);
				for(int i=0;i<4;i++)
				{
					naTime[i] = (nTime & (0x000000FFUL<<(i*8))) >> (i*8);
 230:	e0 90 66 00 	lds	r14, 0x0066
 234:	f0 90 67 00 	lds	r15, 0x0067
 238:	00 91 68 00 	lds	r16, 0x0068
 23c:	10 91 69 00 	lds	r17, 0x0069
 240:	e8 e7       	ldi	r30, 0x78	; 120
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	d2 01       	movw	r26, r4
 24a:	c1 01       	movw	r24, r2
 24c:	04 2e       	mov	r0, r20
 24e:	04 c0       	rjmp	.+8      	; 0x258 <main+0x15a>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	aa 1f       	adc	r26, r26
 256:	bb 1f       	adc	r27, r27
 258:	0a 94       	dec	r0
 25a:	d2 f7       	brpl	.-12     	; 0x250 <main+0x152>
 25c:	8e 21       	and	r24, r14
 25e:	9f 21       	and	r25, r15
 260:	a0 23       	and	r26, r16
 262:	b1 23       	and	r27, r17
 264:	04 2e       	mov	r0, r20
 266:	04 c0       	rjmp	.+8      	; 0x270 <main+0x172>
 268:	b6 95       	lsr	r27
 26a:	a7 95       	ror	r26
 26c:	97 95       	ror	r25
 26e:	87 95       	ror	r24
 270:	0a 94       	dec	r0
 272:	d2 f7       	brpl	.-12     	; 0x268 <main+0x16a>
 274:	81 93       	st	Z+, r24
 276:	48 5f       	subi	r20, 0xF8	; 248
 278:	5f 4f       	sbci	r21, 0xFF	; 255
			{
				//sendChar('\n');
				//itoa(nTime, sTime, 10);
				//sendString(sTime);		//Time
				//sendChar(nTime);
				for(int i=0;i<4;i++)
 27a:	40 32       	cpi	r20, 0x20	; 32
 27c:	51 05       	cpc	r21, r1
 27e:	21 f7       	brne	.-56     	; 0x248 <main+0x14a>
				{
					naTime[i] = (nTime & (0x000000FFUL<<(i*8))) >> (i*8);
				}
				sendString_l(naTime,4);
 280:	88 e7       	ldi	r24, 0x78	; 120
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	64 e0       	ldi	r22, 0x04	; 4
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	0e 94 6e 00 	call	0xdc	; 0xdc <sendString_l>
				//sendChar(',');
			}
			//_delay_ms(1000);
			ADCSRA &= ~(1<<ADIF);
 28c:	34 98       	cbi	0x06, 4	; 6
			
			if(channel <= 0)
 28e:	81 14       	cp	r8, r1
 290:	91 04       	cpc	r9, r1
 292:	31 f4       	brne	.+12     	; 0x2a0 <main+0x1a2>
			{
				ADMUX = 0b00100000;		//X
 294:	20 e2       	ldi	r18, 0x20	; 32
 296:	27 b9       	out	0x07, r18	; 7
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	82 2e       	mov	r8, r18
 29c:	91 2c       	mov	r9, r1
 29e:	0e c0       	rjmp	.+28     	; 0x2bc <main+0x1be>
				channel++;
			}
			else if(channel == 1)
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	88 16       	cp	r8, r24
 2a4:	91 04       	cpc	r9, r1
 2a6:	31 f4       	brne	.+12     	; 0x2b4 <main+0x1b6>
			{
				ADMUX = 0b00100001;		//Y
 2a8:	91 e2       	ldi	r25, 0x21	; 33
 2aa:	97 b9       	out	0x07, r25	; 7
 2ac:	92 e0       	ldi	r25, 0x02	; 2
 2ae:	89 2e       	mov	r8, r25
 2b0:	91 2c       	mov	r9, r1
 2b2:	04 c0       	rjmp	.+8      	; 0x2bc <main+0x1be>
				channel++;
			}
			else if(channel >= 2)
			{
				ADMUX = 0b00100010;		//Z
 2b4:	22 e2       	ldi	r18, 0x22	; 34
 2b6:	27 b9       	out	0x07, r18	; 7
 2b8:	88 24       	eor	r8, r8
 2ba:	99 24       	eor	r9, r9
				channel = 0;
			}
			
			ADCSRA |= 1<<ADSC;
 2bc:	36 9a       	sbi	0x06, 6	; 6
 2be:	85 01       	movw	r16, r10
		}
		
		if (bit_is_clear(PINB, 0))
 2c0:	b0 99       	sbic	0x16, 0	; 22
 2c2:	2e c0       	rjmp	.+92     	; 0x320 <main+0x222>
		{
			Pressed_Confidence_Level++;
 2c4:	21 96       	adiw	r28, 0x01	; 1
			Released_Confidence_Level = 0;
			if (Pressed_Confidence_Level > 100)
 2c6:	c5 36       	cpi	r28, 0x65	; 101
 2c8:	d1 05       	cpc	r29, r1
 2ca:	1c f4       	brge	.+6      	; 0x2d2 <main+0x1d4>
 2cc:	cc 24       	eor	r12, r12
 2ce:	dd 24       	eor	r13, r13
 2d0:	66 cf       	rjmp	.-308    	; 0x19e <main+0xa0>
			{
				if (Pressed == 0)
 2d2:	61 14       	cp	r6, r1
 2d4:	71 04       	cpc	r7, r1
 2d6:	19 f0       	breq	.+6      	; 0x2de <main+0x1e0>
 2d8:	cc 24       	eor	r12, r12
 2da:	dd 24       	eor	r13, r13
 2dc:	5e cf       	rjmp	.-324    	; 0x19a <main+0x9c>
				{
					Pressed = 1;
					if(startDataStream)startDataStream = 0;
 2de:	80 91 6a 00 	lds	r24, 0x006A
 2e2:	90 91 6b 00 	lds	r25, 0x006B
 2e6:	89 2b       	or	r24, r25
 2e8:	29 f0       	breq	.+10     	; 0x2f4 <main+0x1f6>
 2ea:	10 92 6b 00 	sts	0x006B, r1
 2ee:	10 92 6a 00 	sts	0x006A, r1
 2f2:	06 c0       	rjmp	.+12     	; 0x300 <main+0x202>
					else if(!startDataStream)startDataStream = 1;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	90 93 6b 00 	sts	0x006B, r25
 2fc:	80 93 6a 00 	sts	0x006A, r24
					nTime = 0;
 300:	10 92 66 00 	sts	0x0066, r1
 304:	10 92 67 00 	sts	0x0067, r1
 308:	10 92 68 00 	sts	0x0068, r1
 30c:	10 92 69 00 	sts	0x0069, r1
					press();					
 310:	0e 94 49 00 	call	0x92	; 0x92 <press>
 314:	cc 24       	eor	r12, r12
 316:	dd 24       	eor	r13, r13
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	68 2e       	mov	r6, r24
 31c:	71 2c       	mov	r7, r1
 31e:	3d cf       	rjmp	.-390    	; 0x19a <main+0x9c>
				Pressed_Confidence_Level = 0;
			}
		}
		else
		{
			Released_Confidence_Level++;
 320:	08 94       	sec
 322:	c1 1c       	adc	r12, r1
 324:	d1 1c       	adc	r13, r1
			Pressed_Confidence_Level = 0;
			if (Released_Confidence_Level > 100)
 326:	95 e6       	ldi	r25, 0x65	; 101
 328:	c9 16       	cp	r12, r25
 32a:	d1 04       	cpc	r13, r1
 32c:	0c f0       	brlt	.+2      	; 0x330 <main+0x232>
 32e:	31 cf       	rjmp	.-414    	; 0x192 <main+0x94>
 330:	34 cf       	rjmp	.-408    	; 0x19a <main+0x9c>

00000332 <malloc>:
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	bc 01       	movw	r22, r24
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	91 05       	cpc	r25, r1
 33c:	10 f4       	brcc	.+4      	; 0x342 <malloc+0x10>
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	a0 91 7e 00 	lds	r26, 0x007E
 346:	b0 91 7f 00 	lds	r27, 0x007F
 34a:	ed 01       	movw	r28, r26
 34c:	e0 e0       	ldi	r30, 0x00	; 0
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	21 c0       	rjmp	.+66     	; 0x398 <malloc+0x66>
 356:	88 81       	ld	r24, Y
 358:	99 81       	ldd	r25, Y+1	; 0x01
 35a:	86 17       	cp	r24, r22
 35c:	97 07       	cpc	r25, r23
 35e:	69 f4       	brne	.+26     	; 0x37a <malloc+0x48>
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	9b 81       	ldd	r25, Y+3	; 0x03
 364:	30 97       	sbiw	r30, 0x00	; 0
 366:	19 f0       	breq	.+6      	; 0x36e <malloc+0x3c>
 368:	93 83       	std	Z+3, r25	; 0x03
 36a:	82 83       	std	Z+2, r24	; 0x02
 36c:	04 c0       	rjmp	.+8      	; 0x376 <malloc+0x44>
 36e:	90 93 7f 00 	sts	0x007F, r25
 372:	80 93 7e 00 	sts	0x007E, r24
 376:	fe 01       	movw	r30, r28
 378:	34 c0       	rjmp	.+104    	; 0x3e2 <malloc+0xb0>
 37a:	68 17       	cp	r22, r24
 37c:	79 07       	cpc	r23, r25
 37e:	38 f4       	brcc	.+14     	; 0x38e <malloc+0x5c>
 380:	41 15       	cp	r20, r1
 382:	51 05       	cpc	r21, r1
 384:	19 f0       	breq	.+6      	; 0x38c <malloc+0x5a>
 386:	84 17       	cp	r24, r20
 388:	95 07       	cpc	r25, r21
 38a:	08 f4       	brcc	.+2      	; 0x38e <malloc+0x5c>
 38c:	ac 01       	movw	r20, r24
 38e:	fe 01       	movw	r30, r28
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	9b 81       	ldd	r25, Y+3	; 0x03
 394:	9c 01       	movw	r18, r24
 396:	e9 01       	movw	r28, r18
 398:	20 97       	sbiw	r28, 0x00	; 0
 39a:	e9 f6       	brne	.-70     	; 0x356 <malloc+0x24>
 39c:	41 15       	cp	r20, r1
 39e:	51 05       	cpc	r21, r1
 3a0:	a9 f1       	breq	.+106    	; 0x40c <malloc+0xda>
 3a2:	ca 01       	movw	r24, r20
 3a4:	86 1b       	sub	r24, r22
 3a6:	97 0b       	sbc	r25, r23
 3a8:	04 97       	sbiw	r24, 0x04	; 4
 3aa:	08 f4       	brcc	.+2      	; 0x3ae <malloc+0x7c>
 3ac:	ba 01       	movw	r22, r20
 3ae:	e0 e0       	ldi	r30, 0x00	; 0
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	2a c0       	rjmp	.+84     	; 0x408 <malloc+0xd6>
 3b4:	8d 91       	ld	r24, X+
 3b6:	9c 91       	ld	r25, X
 3b8:	11 97       	sbiw	r26, 0x01	; 1
 3ba:	84 17       	cp	r24, r20
 3bc:	95 07       	cpc	r25, r21
 3be:	f9 f4       	brne	.+62     	; 0x3fe <malloc+0xcc>
 3c0:	64 17       	cp	r22, r20
 3c2:	75 07       	cpc	r23, r21
 3c4:	81 f4       	brne	.+32     	; 0x3e6 <malloc+0xb4>
 3c6:	12 96       	adiw	r26, 0x02	; 2
 3c8:	8d 91       	ld	r24, X+
 3ca:	9c 91       	ld	r25, X
 3cc:	13 97       	sbiw	r26, 0x03	; 3
 3ce:	30 97       	sbiw	r30, 0x00	; 0
 3d0:	19 f0       	breq	.+6      	; 0x3d8 <malloc+0xa6>
 3d2:	93 83       	std	Z+3, r25	; 0x03
 3d4:	82 83       	std	Z+2, r24	; 0x02
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <malloc+0xae>
 3d8:	90 93 7f 00 	sts	0x007F, r25
 3dc:	80 93 7e 00 	sts	0x007E, r24
 3e0:	fd 01       	movw	r30, r26
 3e2:	32 96       	adiw	r30, 0x02	; 2
 3e4:	4f c0       	rjmp	.+158    	; 0x484 <malloc+0x152>
 3e6:	ca 01       	movw	r24, r20
 3e8:	86 1b       	sub	r24, r22
 3ea:	97 0b       	sbc	r25, r23
 3ec:	fd 01       	movw	r30, r26
 3ee:	e8 0f       	add	r30, r24
 3f0:	f9 1f       	adc	r31, r25
 3f2:	61 93       	st	Z+, r22
 3f4:	71 93       	st	Z+, r23
 3f6:	02 97       	sbiw	r24, 0x02	; 2
 3f8:	8d 93       	st	X+, r24
 3fa:	9c 93       	st	X, r25
 3fc:	43 c0       	rjmp	.+134    	; 0x484 <malloc+0x152>
 3fe:	fd 01       	movw	r30, r26
 400:	82 81       	ldd	r24, Z+2	; 0x02
 402:	93 81       	ldd	r25, Z+3	; 0x03
 404:	9c 01       	movw	r18, r24
 406:	d9 01       	movw	r26, r18
 408:	10 97       	sbiw	r26, 0x00	; 0
 40a:	a1 f6       	brne	.-88     	; 0x3b4 <malloc+0x82>
 40c:	80 91 7c 00 	lds	r24, 0x007C
 410:	90 91 7d 00 	lds	r25, 0x007D
 414:	89 2b       	or	r24, r25
 416:	41 f4       	brne	.+16     	; 0x428 <malloc+0xf6>
 418:	80 91 62 00 	lds	r24, 0x0062
 41c:	90 91 63 00 	lds	r25, 0x0063
 420:	90 93 7d 00 	sts	0x007D, r25
 424:	80 93 7c 00 	sts	0x007C, r24
 428:	40 91 64 00 	lds	r20, 0x0064
 42c:	50 91 65 00 	lds	r21, 0x0065
 430:	41 15       	cp	r20, r1
 432:	51 05       	cpc	r21, r1
 434:	41 f4       	brne	.+16     	; 0x446 <malloc+0x114>
 436:	4d b7       	in	r20, 0x3d	; 61
 438:	5e b7       	in	r21, 0x3e	; 62
 43a:	80 91 60 00 	lds	r24, 0x0060
 43e:	90 91 61 00 	lds	r25, 0x0061
 442:	48 1b       	sub	r20, r24
 444:	59 0b       	sbc	r21, r25
 446:	20 91 7c 00 	lds	r18, 0x007C
 44a:	30 91 7d 00 	lds	r19, 0x007D
 44e:	24 17       	cp	r18, r20
 450:	35 07       	cpc	r19, r21
 452:	b0 f4       	brcc	.+44     	; 0x480 <malloc+0x14e>
 454:	ca 01       	movw	r24, r20
 456:	82 1b       	sub	r24, r18
 458:	93 0b       	sbc	r25, r19
 45a:	86 17       	cp	r24, r22
 45c:	97 07       	cpc	r25, r23
 45e:	80 f0       	brcs	.+32     	; 0x480 <malloc+0x14e>
 460:	ab 01       	movw	r20, r22
 462:	4e 5f       	subi	r20, 0xFE	; 254
 464:	5f 4f       	sbci	r21, 0xFF	; 255
 466:	84 17       	cp	r24, r20
 468:	95 07       	cpc	r25, r21
 46a:	50 f0       	brcs	.+20     	; 0x480 <malloc+0x14e>
 46c:	42 0f       	add	r20, r18
 46e:	53 1f       	adc	r21, r19
 470:	50 93 7d 00 	sts	0x007D, r21
 474:	40 93 7c 00 	sts	0x007C, r20
 478:	f9 01       	movw	r30, r18
 47a:	61 93       	st	Z+, r22
 47c:	71 93       	st	Z+, r23
 47e:	02 c0       	rjmp	.+4      	; 0x484 <malloc+0x152>
 480:	e0 e0       	ldi	r30, 0x00	; 0
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	cf 01       	movw	r24, r30
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <free>:
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	00 97       	sbiw	r24, 0x00	; 0
 492:	09 f4       	brne	.+2      	; 0x496 <free+0xa>
 494:	50 c0       	rjmp	.+160    	; 0x536 <free+0xaa>
 496:	ec 01       	movw	r28, r24
 498:	22 97       	sbiw	r28, 0x02	; 2
 49a:	1b 82       	std	Y+3, r1	; 0x03
 49c:	1a 82       	std	Y+2, r1	; 0x02
 49e:	a0 91 7e 00 	lds	r26, 0x007E
 4a2:	b0 91 7f 00 	lds	r27, 0x007F
 4a6:	10 97       	sbiw	r26, 0x00	; 0
 4a8:	09 f1       	breq	.+66     	; 0x4ec <free+0x60>
 4aa:	40 e0       	ldi	r20, 0x00	; 0
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	ac 17       	cp	r26, r28
 4b0:	bd 07       	cpc	r27, r29
 4b2:	08 f1       	brcs	.+66     	; 0x4f6 <free+0x6a>
 4b4:	bb 83       	std	Y+3, r27	; 0x03
 4b6:	aa 83       	std	Y+2, r26	; 0x02
 4b8:	fe 01       	movw	r30, r28
 4ba:	21 91       	ld	r18, Z+
 4bc:	31 91       	ld	r19, Z+
 4be:	e2 0f       	add	r30, r18
 4c0:	f3 1f       	adc	r31, r19
 4c2:	ae 17       	cp	r26, r30
 4c4:	bf 07       	cpc	r27, r31
 4c6:	79 f4       	brne	.+30     	; 0x4e6 <free+0x5a>
 4c8:	8d 91       	ld	r24, X+
 4ca:	9c 91       	ld	r25, X
 4cc:	11 97       	sbiw	r26, 0x01	; 1
 4ce:	28 0f       	add	r18, r24
 4d0:	39 1f       	adc	r19, r25
 4d2:	2e 5f       	subi	r18, 0xFE	; 254
 4d4:	3f 4f       	sbci	r19, 0xFF	; 255
 4d6:	39 83       	std	Y+1, r19	; 0x01
 4d8:	28 83       	st	Y, r18
 4da:	12 96       	adiw	r26, 0x02	; 2
 4dc:	8d 91       	ld	r24, X+
 4de:	9c 91       	ld	r25, X
 4e0:	13 97       	sbiw	r26, 0x03	; 3
 4e2:	9b 83       	std	Y+3, r25	; 0x03
 4e4:	8a 83       	std	Y+2, r24	; 0x02
 4e6:	41 15       	cp	r20, r1
 4e8:	51 05       	cpc	r21, r1
 4ea:	71 f4       	brne	.+28     	; 0x508 <free+0x7c>
 4ec:	d0 93 7f 00 	sts	0x007F, r29
 4f0:	c0 93 7e 00 	sts	0x007E, r28
 4f4:	20 c0       	rjmp	.+64     	; 0x536 <free+0xaa>
 4f6:	12 96       	adiw	r26, 0x02	; 2
 4f8:	8d 91       	ld	r24, X+
 4fa:	9c 91       	ld	r25, X
 4fc:	13 97       	sbiw	r26, 0x03	; 3
 4fe:	ad 01       	movw	r20, r26
 500:	00 97       	sbiw	r24, 0x00	; 0
 502:	11 f0       	breq	.+4      	; 0x508 <free+0x7c>
 504:	dc 01       	movw	r26, r24
 506:	d3 cf       	rjmp	.-90     	; 0x4ae <free+0x22>
 508:	fa 01       	movw	r30, r20
 50a:	d3 83       	std	Z+3, r29	; 0x03
 50c:	c2 83       	std	Z+2, r28	; 0x02
 50e:	21 91       	ld	r18, Z+
 510:	31 91       	ld	r19, Z+
 512:	e2 0f       	add	r30, r18
 514:	f3 1f       	adc	r31, r19
 516:	ce 17       	cp	r28, r30
 518:	df 07       	cpc	r29, r31
 51a:	69 f4       	brne	.+26     	; 0x536 <free+0xaa>
 51c:	88 81       	ld	r24, Y
 51e:	99 81       	ldd	r25, Y+1	; 0x01
 520:	28 0f       	add	r18, r24
 522:	39 1f       	adc	r19, r25
 524:	2e 5f       	subi	r18, 0xFE	; 254
 526:	3f 4f       	sbci	r19, 0xFF	; 255
 528:	fa 01       	movw	r30, r20
 52a:	31 83       	std	Z+1, r19	; 0x01
 52c:	20 83       	st	Z, r18
 52e:	8a 81       	ldd	r24, Y+2	; 0x02
 530:	9b 81       	ldd	r25, Y+3	; 0x03
 532:	93 83       	std	Z+3, r25	; 0x03
 534:	82 83       	std	Z+2, r24	; 0x02
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <_exit>:
 53c:	f8 94       	cli

0000053e <__stop_program>:
 53e:	ff cf       	rjmp	.-2      	; 0x53e <__stop_program>
