
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002d2  00800060  000008f2  00000986  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004b  00800332  00800332  00000c58  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002fd  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d6e  00000000  00000000  00000f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000270  00000000  00000000  00001ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009a5  00000000  00000000  00001f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  000028f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000567  00000000  00000000  00002a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000645  00000000  00000000  00002fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 1b 03 	jmp	0x636	; 0x636 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 33       	cpi	r26, 0x32	; 50
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	13 e0       	ldi	r17, 0x03	; 3
  78:	a2 e3       	ldi	r26, 0x32	; 50
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 98 02 	call	0x530	; 0x530 <main>
  8a:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ButtonPressed>:
int Pressed_Confidence_Level[numberOfButtons]; //Measure button press confidence
int Released_Confidence_Level[numberOfButtons]; //Measure button release confidence
int Required_Confidence_Level = 2000;

char ButtonPressed(buttonName button, unsigned char pinOfButton, unsigned char portBit, int confidenceLevel)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	0f 92       	push	r0
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	69 83       	std	Y+1, r22	; 0x01
  9e:	b9 01       	movw	r22, r18
	if (bit_is_clear(pinOfButton, portBit))
  a0:	29 81       	ldd	r18, Y+1	; 0x01
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <ButtonPressed+0x18>
  a6:	35 95       	asr	r19
  a8:	27 95       	ror	r18
  aa:	4a 95       	dec	r20
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <ButtonPressed+0x14>
  ae:	48 2f       	mov	r20, r24
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	20 fd       	sbrc	r18, 0
  b4:	1d c0       	rjmp	.+58     	; 0xf0 <ButtonPressed+0x5e>
	{
		Pressed_Confidence_Level[button] ++; //Increase Pressed Confidence
  b6:	fa 01       	movw	r30, r20
  b8:	ee 0f       	add	r30, r30
  ba:	ff 1f       	adc	r31, r31
  bc:	df 01       	movw	r26, r30
  be:	a1 59       	subi	r26, 0x91	; 145
  c0:	bc 4f       	sbci	r27, 0xFC	; 252
  c2:	8d 91       	ld	r24, X+
  c4:	9c 91       	ld	r25, X
  c6:	11 97       	sbiw	r26, 0x01	; 1
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	9c 93       	st	X, r25
  ce:	8e 93       	st	-X, r24
		Released_Confidence_Level[button] = 0; //Reset released confidence since there's a button press
  d0:	e1 5c       	subi	r30, 0xC1	; 193
  d2:	fc 4f       	sbci	r31, 0xFC	; 252
  d4:	11 82       	std	Z+1, r1	; 0x01
  d6:	10 82       	st	Z, r1
		if (Pressed_Confidence_Level[button] > confidenceLevel) //Indicator of good button press
  d8:	68 17       	cp	r22, r24
  da:	79 07       	cpc	r23, r25
  dc:	1c f5       	brge	.+70     	; 0x124 <ButtonPressed+0x92>
		{
			if(Pressed[button] == 0)
  de:	fa 01       	movw	r30, r20
  e0:	e7 58       	subi	r30, 0x87	; 135
  e2:	fc 4f       	sbci	r31, 0xFC	; 252
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	d9 f4       	brne	.+54     	; 0x120 <ButtonPressed+0x8e>
			{
				Pressed[button] = 1;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 83       	st	Z, r24
  ee:	1b c0       	rjmp	.+54     	; 0x126 <ButtonPressed+0x94>
			Pressed_Confidence_Level[button] = 0;
		}
	}
	else
	{
		Released_Confidence_Level[button] ++; //increased released confidence level
  f0:	fa 01       	movw	r30, r20
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	df 01       	movw	r26, r30
  f8:	a1 5c       	subi	r26, 0xC1	; 193
  fa:	bc 4f       	sbci	r27, 0xFC	; 252
  fc:	8d 91       	ld	r24, X+
  fe:	9c 91       	ld	r25, X
 100:	11 97       	sbiw	r26, 0x01	; 1
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	11 96       	adiw	r26, 0x01	; 1
 106:	9c 93       	st	X, r25
 108:	8e 93       	st	-X, r24
		Pressed_Confidence_Level[button] = 0; //Reset pressed confidence level since the button has been released
 10a:	e1 59       	subi	r30, 0x91	; 145
 10c:	fc 4f       	sbci	r31, 0xFC	; 252
 10e:	11 82       	std	Z+1, r1	; 0x01
 110:	10 82       	st	Z, r1
		if (Released_Confidence_Level[button] > confidenceLevel)
 112:	68 17       	cp	r22, r24
 114:	79 07       	cpc	r23, r25
 116:	34 f4       	brge	.+12     	; 0x124 <ButtonPressed+0x92>
		{
			Pressed[button] = 0;
 118:	47 58       	subi	r20, 0x87	; 135
 11a:	5c 4f       	sbci	r21, 0xFC	; 252
 11c:	fa 01       	movw	r30, r20
 11e:	10 82       	st	Z, r1
			Released_Confidence_Level[button] = 0;
 120:	1d 92       	st	X+, r1
 122:	1c 92       	st	X, r1
 124:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 0;
}
 126:	0f 90       	pop	r0
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	08 95       	ret

0000012e <LCD_shiftTic>:
	*LCD_portPointer &= ~(1<<LCD_dataPin);
}

void LCD_shiftTic(void)
{
	*LCD_portPointer |= (1<<LCD_shiftPin);
 12e:	e0 91 36 03 	lds	r30, 0x0336
 132:	f0 91 37 03 	lds	r31, 0x0337
 136:	20 81       	ld	r18, Z
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	00 90 39 03 	lds	r0, 0x0339
 140:	02 c0       	rjmp	.+4      	; 0x146 <LCD_shiftTic+0x18>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <LCD_shiftTic+0x14>
 14a:	28 2b       	or	r18, r24
 14c:	20 83       	st	Z, r18
	*LCD_portPointer &= ~(1<<LCD_shiftPin);
 14e:	20 81       	ld	r18, Z
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	80 83       	st	Z, r24
}
 156:	08 95       	ret

00000158 <LCD_latchTic>:

void LCD_latchTic(void)
{
	*LCD_portPointer |= (1<<LCD_latchPin);
 158:	e0 91 36 03 	lds	r30, 0x0336
 15c:	f0 91 37 03 	lds	r31, 0x0337
 160:	20 81       	ld	r18, Z
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	00 90 3a 03 	lds	r0, 0x033A
 16a:	02 c0       	rjmp	.+4      	; 0x170 <LCD_latchTic+0x18>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <LCD_latchTic+0x14>
 174:	28 2b       	or	r18, r24
 176:	20 83       	st	Z, r18
	*LCD_portPointer &= ~(1<<LCD_latchPin);
 178:	20 81       	ld	r18, Z
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	80 83       	st	Z, r24
}
 180:	08 95       	ret

00000182 <LCD_shiftOut>:
	LCD_sendCommand(0b00000110);	//Cursor move direction set to right
	LCD_sendCommand(0b00001100);	//Display On, Cursor Off, Cursor Not Blinking
}

void LCD_shiftOut(unsigned char data)
{
 182:	af 92       	push	r10
 184:	bf 92       	push	r11
 186:	cf 92       	push	r12
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
	for(int i=0;i<8;i++)
	{
		if((data & (1<<(7-i))) == (1<<(7-i)))	//If bit in the 'data' byte is set . . .
		{
			*LCD_portPointer |= (1<<LCD_dataPin);	//set dataPin high
 196:	00 91 36 03 	lds	r16, 0x0336
 19a:	10 91 37 03 	lds	r17, 0x0337
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	00 90 38 03 	lds	r0, 0x0338
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <LCD_shiftOut+0x2a>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <LCD_shiftOut+0x26>
 1b0:	e2 2e       	mov	r14, r18
		}
		else	//Otherwise . . .
		{
			*LCD_portPointer &= ~(1<<LCD_dataPin);	//set datapin low
 1b2:	f2 2e       	mov	r15, r18
 1b4:	f0 94       	com	r15
 1b6:	c7 e0       	ldi	r28, 0x07	; 7
 1b8:	d0 e0       	ldi	r29, 0x00	; 0

void LCD_shiftOut(unsigned char data)
{
	for(int i=0;i<8;i++)
	{
		if((data & (1<<(7-i))) == (1<<(7-i)))	//If bit in the 'data' byte is set . . .
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	a2 2e       	mov	r10, r18
 1be:	b1 2c       	mov	r11, r1
 1c0:	c8 2e       	mov	r12, r24
 1c2:	dd 24       	eor	r13, r13
 1c4:	95 01       	movw	r18, r10
 1c6:	0c 2e       	mov	r0, r28
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <LCD_shiftOut+0x4c>
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <LCD_shiftOut+0x48>
 1d2:	c9 01       	movw	r24, r18
 1d4:	8c 21       	and	r24, r12
 1d6:	9d 21       	and	r25, r13
 1d8:	82 17       	cp	r24, r18
 1da:	93 07       	cpc	r25, r19
 1dc:	21 f4       	brne	.+8      	; 0x1e6 <LCD_shiftOut+0x64>
		{
			*LCD_portPointer |= (1<<LCD_dataPin);	//set dataPin high
 1de:	f8 01       	movw	r30, r16
 1e0:	80 81       	ld	r24, Z
 1e2:	8e 29       	or	r24, r14
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <LCD_shiftOut+0x6a>
		}
		else	//Otherwise . . .
		{
			*LCD_portPointer &= ~(1<<LCD_dataPin);	//set datapin low
 1e6:	f8 01       	movw	r30, r16
 1e8:	80 81       	ld	r24, Z
 1ea:	8f 21       	and	r24, r15
 1ec:	80 83       	st	Z, r24
		}
		LCD_shiftTic();	//Then tic the data in with the shift-clock and repeat
 1ee:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_shiftTic>
 1f2:	21 97       	sbiw	r28, 0x01	; 1
	LCD_sendCommand(0b00001100);	//Display On, Cursor Off, Cursor Not Blinking
}

void LCD_shiftOut(unsigned char data)
{
	for(int i=0;i<8;i++)
 1f4:	ff ef       	ldi	r31, 0xFF	; 255
 1f6:	cf 3f       	cpi	r28, 0xFF	; 255
 1f8:	df 07       	cpc	r29, r31
 1fa:	21 f7       	brne	.-56     	; 0x1c4 <LCD_shiftOut+0x42>
		{
			*LCD_portPointer &= ~(1<<LCD_dataPin);	//set datapin low
		}
		LCD_shiftTic();	//Then tic the data in with the shift-clock and repeat
	}
	LCD_latchTic();	//tic the latch to output from shift register
 1fc:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_latchTic>
	*LCD_portPointer &= ~(1<<LCD_dataPin);
 200:	f8 01       	movw	r30, r16
 202:	80 81       	ld	r24, Z
 204:	f8 22       	and	r15, r24
 206:	f0 82       	st	Z, r15
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	df 90       	pop	r13
 216:	cf 90       	pop	r12
 218:	bf 90       	pop	r11
 21a:	af 90       	pop	r10
 21c:	08 95       	ret

0000021e <LCD_flash>:
	LCD_lastDraw = NILDRAW;
}

void LCD_flash(void)
{
	*LCD_portPointer |= (1<<LCD_E);
 21e:	e0 91 36 03 	lds	r30, 0x0336
 222:	f0 91 37 03 	lds	r31, 0x0337
 226:	20 81       	ld	r18, Z
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	00 90 3d 03 	lds	r0, 0x033D
 230:	02 c0       	rjmp	.+4      	; 0x236 <LCD_flash+0x18>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <LCD_flash+0x14>
 23a:	28 2b       	or	r18, r24
 23c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23e:	a0 e4       	ldi	r26, 0x40	; 64
 240:	bf e1       	ldi	r27, 0x1F	; 31
 242:	11 97       	sbiw	r26, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <LCD_flash+0x24>
	_delay_ms(2);
	*LCD_portPointer &= ~(1<<LCD_E);
 246:	20 81       	ld	r18, Z
 248:	80 95       	com	r24
 24a:	82 23       	and	r24, r18
 24c:	80 83       	st	Z, r24
}
 24e:	08 95       	ret

00000250 <LCD_waitForNotBusy>:

void LCD_waitForNotBusy(void)
{
	*LCD_portPointer |= (1<<LCD_RW);
 250:	e0 91 36 03 	lds	r30, 0x0336
 254:	f0 91 37 03 	lds	r31, 0x0337
 258:	20 81       	ld	r18, Z
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	ca 01       	movw	r24, r20
 260:	00 90 3c 03 	lds	r0, 0x033C
 264:	02 c0       	rjmp	.+4      	; 0x26a <LCD_waitForNotBusy+0x1a>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <LCD_waitForNotBusy+0x16>
 26e:	28 2b       	or	r18, r24
 270:	20 83       	st	Z, r18
	*LCD_portPointer &= ~(1<<LCD_RS);
 272:	20 81       	ld	r18, Z
 274:	ca 01       	movw	r24, r20
 276:	00 90 3b 03 	lds	r0, 0x033B
 27a:	02 c0       	rjmp	.+4      	; 0x280 <LCD_waitForNotBusy+0x30>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <LCD_waitForNotBusy+0x2c>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	80 83       	st	Z, r24
 28a:	00 90 3e 03 	lds	r0, 0x033E
 28e:	02 c0       	rjmp	.+4      	; 0x294 <LCD_waitForNotBusy+0x44>
 290:	44 0f       	add	r20, r20
 292:	55 1f       	adc	r21, r21
 294:	0a 94       	dec	r0
 296:	e2 f7       	brpl	.-8      	; 0x290 <LCD_waitForNotBusy+0x40>
	while(!bit_is_clear(*LCD_portPointer,LCD_busyFlag))
 298:	80 81       	ld	r24, Z
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	84 23       	and	r24, r20
 29e:	95 23       	and	r25, r21
 2a0:	89 2b       	or	r24, r25
 2a2:	d1 f7       	brne	.-12     	; 0x298 <LCD_waitForNotBusy+0x48>
	{}
}
 2a4:	08 95       	ret

000002a6 <LCD_sendCharacter>:
	LCD_shiftOut(command);
	LCD_flash();
}

void LCD_sendCharacter(char character)
{
 2a6:	1f 93       	push	r17
 2a8:	18 2f       	mov	r17, r24
	LCD_waitForNotBusy();
 2aa:	0e 94 28 01 	call	0x250	; 0x250 <LCD_waitForNotBusy>
	*LCD_portPointer &= ~(1<<LCD_RW);
 2ae:	e0 91 36 03 	lds	r30, 0x0336
 2b2:	f0 91 37 03 	lds	r31, 0x0337
 2b6:	40 81       	ld	r20, Z
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	c9 01       	movw	r24, r18
 2be:	00 90 3c 03 	lds	r0, 0x033C
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <LCD_sendCharacter+0x22>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <LCD_sendCharacter+0x1e>
 2cc:	80 95       	com	r24
 2ce:	84 23       	and	r24, r20
 2d0:	80 83       	st	Z, r24
	*LCD_portPointer |= (1<<LCD_RS);
 2d2:	80 81       	ld	r24, Z
 2d4:	00 90 3b 03 	lds	r0, 0x033B
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <LCD_sendCharacter+0x38>
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <LCD_sendCharacter+0x34>
 2e2:	82 2b       	or	r24, r18
 2e4:	80 83       	st	Z, r24
	LCD_shiftOut(character);
 2e6:	81 2f       	mov	r24, r17
 2e8:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_shiftOut>
	LCD_flash();
 2ec:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_flash>
}
 2f0:	1f 91       	pop	r17
 2f2:	08 95       	ret

000002f4 <LCD_sendCommand>:
	*LCD_portPointer |= (1<<LCD_latchPin);
	*LCD_portPointer &= ~(1<<LCD_latchPin);
}

void LCD_sendCommand(char command)
{
 2f4:	1f 93       	push	r17
 2f6:	18 2f       	mov	r17, r24
	LCD_waitForNotBusy();
 2f8:	0e 94 28 01 	call	0x250	; 0x250 <LCD_waitForNotBusy>
	*LCD_portPointer &= ~(1<<LCD_RS | 1<<LCD_RW);
 2fc:	e0 91 36 03 	lds	r30, 0x0336
 300:	f0 91 37 03 	lds	r31, 0x0337
 304:	40 81       	ld	r20, Z
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	c9 01       	movw	r24, r18
 30c:	00 90 3c 03 	lds	r0, 0x033C
 310:	02 c0       	rjmp	.+4      	; 0x316 <LCD_sendCommand+0x22>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	0a 94       	dec	r0
 318:	e2 f7       	brpl	.-8      	; 0x312 <LCD_sendCommand+0x1e>
 31a:	00 90 3b 03 	lds	r0, 0x033B
 31e:	02 c0       	rjmp	.+4      	; 0x324 <LCD_sendCommand+0x30>
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <LCD_sendCommand+0x2c>
 328:	82 2b       	or	r24, r18
 32a:	80 95       	com	r24
 32c:	84 23       	and	r24, r20
 32e:	80 83       	st	Z, r24
	LCD_shiftOut(command);
 330:	81 2f       	mov	r24, r17
 332:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_shiftOut>
	LCD_flash();
 336:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_flash>
}
 33a:	1f 91       	pop	r17
 33c:	08 95       	ret

0000033e <LCD_clear>:
	LCD_sendCommand(0x80 + index);
}

void LCD_clear(void)
{
	LCD_sendCommand(0b00000001);
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_sendCommand>
 344:	84 ef       	ldi	r24, 0xF4	; 244
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	20 e9       	ldi	r18, 0x90	; 144
 34a:	31 e0       	ldi	r19, 0x01	; 1
 34c:	f9 01       	movw	r30, r18
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <LCD_clear+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 352:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 354:	d9 f7       	brne	.-10     	; 0x34c <LCD_clear+0xe>
	_delay_ms(50);
	LCD_sendCommand(0b00000010);
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_sendCommand>
 35c:	84 ef       	ldi	r24, 0xF4	; 244
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	20 e9       	ldi	r18, 0x90	; 144
 362:	31 e0       	ldi	r19, 0x01	; 1
 364:	f9 01       	movw	r30, r18
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <LCD_clear+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 36a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 36c:	d9 f7       	brne	.-10     	; 0x364 <LCD_clear+0x26>
	_delay_ms(50);
	LCD_lastDraw = NILDRAW;
 36e:	10 92 32 03 	sts	0x0332, r1
}
 372:	08 95       	ret

00000374 <LCD_setLocation>:
	return;
}

void LCD_setLocation(int index)
{
	LCD_sendCommand(0x80 + index);
 374:	80 58       	subi	r24, 0x80	; 128
 376:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_sendCommand>
}
 37a:	08 95       	ret

0000037c <LCD_sendString>:
	LCD_shiftOut(character);
	LCD_flash();
}

void LCD_sendString(char* string)
{
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	8c 01       	movw	r16, r24
 386:	c0 e0       	ldi	r28, 0x00	; 0
 388:	d0 e0       	ldi	r29, 0x00	; 0
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <LCD_sendString+0x2a>
	unsigned int i = 0;
	while(string[i] != '\0')
	{
		if(i>15)
 38c:	c0 31       	cpi	r28, 0x10	; 16
 38e:	d1 05       	cpc	r29, r1
 390:	20 f0       	brcs	.+8      	; 0x39a <LCD_sendString+0x1e>
		{
			LCD_setLocation(0x40 + (i-16));
 392:	ce 01       	movw	r24, r28
 394:	c0 96       	adiw	r24, 0x30	; 48
 396:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_setLocation>
		}
		LCD_sendCharacter(string[i]);
 39a:	f8 01       	movw	r30, r16
 39c:	81 91       	ld	r24, Z+
 39e:	8f 01       	movw	r16, r30
 3a0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_sendCharacter>
		i++;
 3a4:	21 96       	adiw	r28, 0x01	; 1
}

void LCD_sendString(char* string)
{
	unsigned int i = 0;
	while(string[i] != '\0')
 3a6:	f8 01       	movw	r30, r16
 3a8:	80 81       	ld	r24, Z
 3aa:	88 23       	and	r24, r24
 3ac:	79 f7       	brne	.-34     	; 0x38c <LCD_sendString+0x10>
			LCD_setLocation(0x40 + (i-16));
		}
		LCD_sendCharacter(string[i]);
		i++;
	}
	LCD_lastDraw = NILDRAW;
 3ae:	10 92 32 03 	sts	0x0332, r1
	return;
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <LCD_init>:
LCD_drawType LCD_lastDraw = NILDRAW;
static unsigned char LCD_dataPin, LCD_shiftPin, LCD_latchPin, LCD_RS, LCD_RW, LCD_E, LCD_busyFlag;	//for LCD_lastSentMethod, 0=command,1=character
static volatile uint8_t* LCD_portPointer = 0;

void LCD_init(volatile uint8_t* portPointer, unsigned char dataPin, unsigned char shiftPin, unsigned char latchPin, unsigned char RS, unsigned char RW, unsigned char E, unsigned char busyFlag)
{
 3bc:	af 92       	push	r10
 3be:	cf 92       	push	r12
 3c0:	ef 92       	push	r14
 3c2:	0f 93       	push	r16
	// Assign Global Variables
	LCD_portPointer = portPointer;
 3c4:	90 93 37 03 	sts	0x0337, r25
 3c8:	80 93 36 03 	sts	0x0336, r24
	LCD_dataPin = dataPin;
 3cc:	60 93 38 03 	sts	0x0338, r22
	LCD_shiftPin = shiftPin;
 3d0:	40 93 39 03 	sts	0x0339, r20
	LCD_latchPin = latchPin;
 3d4:	20 93 3a 03 	sts	0x033A, r18
	LCD_RS = RS;
 3d8:	00 93 3b 03 	sts	0x033B, r16
	LCD_RW = RW;
 3dc:	e0 92 3c 03 	sts	0x033C, r14
	LCD_E = E;
 3e0:	c0 92 3d 03 	sts	0x033D, r12
	LCD_busyFlag = busyFlag;
 3e4:	a0 92 3e 03 	sts	0x033E, r10
 3e8:	80 e6       	ldi	r24, 0x60	; 96
 3ea:	9a ee       	ldi	r25, 0xEA	; 234
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCD_init+0x30>
	
	_delay_ms(15);
	LCD_sendCommand(0b00110000);	//Datasheet specified initialization commands...
 3f0:	80 e3       	ldi	r24, 0x30	; 48
 3f2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_sendCommand>
 3f6:	80 e2       	ldi	r24, 0x20	; 32
 3f8:	9e e4       	ldi	r25, 0x4E	; 78
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <LCD_init+0x3e>
	_delay_ms(5);
	LCD_sendCommand(0b00110000);	//...
 3fe:	80 e3       	ldi	r24, 0x30	; 48
 400:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_sendCommand>
 404:	88 e5       	ldi	r24, 0x58	; 88
 406:	92 e0       	ldi	r25, 0x02	; 2
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <LCD_init+0x4c>
	_delay_us(150);
	LCD_sendCommand(0b00110000);	//...
 40c:	80 e3       	ldi	r24, 0x30	; 48
 40e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_sendCommand>
 412:	80 e4       	ldi	r24, 0x40	; 64
 414:	9f e1       	ldi	r25, 0x1F	; 31
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <LCD_init+0x5a>
	_delay_ms(2);
	
	LCD_sendCommand(0b00111000);	//8-bit interface, 2 display lines, 5x8 dot font
 41a:	88 e3       	ldi	r24, 0x38	; 56
 41c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_sendCommand>
	LCD_clear();					//Clear screen and set cursor to home position
 420:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
	LCD_sendCommand(0b00000110);	//Cursor move direction set to right
 424:	86 e0       	ldi	r24, 0x06	; 6
 426:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_sendCommand>
	LCD_sendCommand(0b00001100);	//Display On, Cursor Off, Cursor Not Blinking
 42a:	8c e0       	ldi	r24, 0x0C	; 12
 42c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_sendCommand>
}
 430:	0f 91       	pop	r16
 432:	ef 90       	pop	r14
 434:	cf 90       	pop	r12
 436:	af 90       	pop	r10
 438:	08 95       	ret

0000043a <LCD_draw>:
	while(!bit_is_clear(*LCD_portPointer,LCD_busyFlag))
	{}
}

void LCD_draw(LCD_drawType type)
{
 43a:	1f 93       	push	r17
 43c:	18 2f       	mov	r17, r24
	if(type != LCD_lastDraw)
 43e:	80 91 32 03 	lds	r24, 0x0332
 442:	18 17       	cp	r17, r24
 444:	b1 f1       	breq	.+108    	; 0x4b2 <LCD_draw+0x78>
	{
		switch(type)
 446:	13 30       	cpi	r17, 0x03	; 3
 448:	c1 f0       	breq	.+48     	; 0x47a <LCD_draw+0x40>
 44a:	14 30       	cpi	r17, 0x04	; 4
 44c:	28 f4       	brcc	.+10     	; 0x458 <LCD_draw+0x1e>
 44e:	11 30       	cpi	r17, 0x01	; 1
 450:	51 f0       	breq	.+20     	; 0x466 <LCD_draw+0x2c>
 452:	12 30       	cpi	r17, 0x02	; 2
 454:	31 f5       	brne	.+76     	; 0x4a2 <LCD_draw+0x68>
 456:	0c c0       	rjmp	.+24     	; 0x470 <LCD_draw+0x36>
 458:	15 30       	cpi	r17, 0x05	; 5
 45a:	c9 f0       	breq	.+50     	; 0x48e <LCD_draw+0x54>
 45c:	15 30       	cpi	r17, 0x05	; 5
 45e:	90 f0       	brcs	.+36     	; 0x484 <LCD_draw+0x4a>
 460:	16 30       	cpi	r17, 0x06	; 6
 462:	f9 f4       	brne	.+62     	; 0x4a2 <LCD_draw+0x68>
 464:	19 c0       	rjmp	.+50     	; 0x498 <LCD_draw+0x5e>
		{
			case DRAW_MENU_LOG:
				LCD_clear();
 466:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("MENU            Begin Log...");
 46a:	80 e6       	ldi	r24, 0x60	; 96
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	1d c0       	rjmp	.+58     	; 0x4aa <LCD_draw+0x70>
				break;
			case DRAW_MENU_SETTINGS:
				LCD_clear();
 470:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("MENU            Settings >>");
 474:	8d e7       	ldi	r24, 0x7D	; 125
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	18 c0       	rjmp	.+48     	; 0x4aa <LCD_draw+0x70>
				break;
			case DRAW_MENU_TRANSFER:
				LCD_clear();
 47a:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("MENU            Transfer...");
 47e:	89 e9       	ldi	r24, 0x99	; 153
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	13 c0       	rjmp	.+38     	; 0x4aa <LCD_draw+0x70>
				break;
			case DRAW_MENU_CALIBRATION:
				LCD_clear();
 484:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("MENU            Calibrate...");
 488:	85 eb       	ldi	r24, 0xB5	; 181
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e c0       	rjmp	.+28     	; 0x4aa <LCD_draw+0x70>
				break;
			case DRAW_MENU_TIME:
				LCD_clear();
 48e:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("MENU            Set Time...");
 492:	82 ed       	ldi	r24, 0xD2	; 210
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	09 c0       	rjmp	.+18     	; 0x4aa <LCD_draw+0x70>
				break;
			case DRAW_LOG_STOP:
				LCD_clear();
 498:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("Save: 'select'  Delete: 'back'");
 49c:	8e ee       	ldi	r24, 0xEE	; 238
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	04 c0       	rjmp	.+8      	; 0x4aa <LCD_draw+0x70>
				break;
			default:
				LCD_clear();
 4a2:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("Error");
 4a6:	8d e0       	ldi	r24, 0x0D	; 13
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendString>
				break;
		}
		LCD_lastDraw = type;
 4ae:	10 93 32 03 	sts	0x0332, r17
	}
	return;
}
 4b2:	1f 91       	pop	r17
 4b4:	08 95       	ret

000004b6 <UART_init>:
 ****************************************/

void UART_init(void)	//Initialize UART
{
	//UART Specifications(Parity,stop bits, data bit length)
	UCSRC &= ~(1 << UMSEL);
 4b6:	80 b5       	in	r24, 0x20	; 32
 4b8:	8f 7b       	andi	r24, 0xBF	; 191
 4ba:	80 bd       	out	0x20, r24	; 32
	
	int UBRR = 34; //57600 Baud
	
	UBRRH &= ~(1 << URSEL);
 4bc:	80 b5       	in	r24, 0x20	; 32
 4be:	8f 77       	andi	r24, 0x7F	; 127
 4c0:	80 bd       	out	0x20, r24	; 32
	//Put the upper part of the baud number here (bits 8 to 11)
	UBRRH = (unsigned char) (UBRR >> 8);
 4c2:	10 bc       	out	0x20, r1	; 32

	//Put the remaining part of the baud number here
	UBRRL = (unsigned char) UBRR; 
 4c4:	82 e2       	ldi	r24, 0x22	; 34
 4c6:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver and transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN);
 4c8:	88 e1       	ldi	r24, 0x18	; 24
 4ca:	8a b9       	out	0x0a, r24	; 10

	//Set frame format to 8 data bits, no parity, 1 stop bit
	UCSRC = (1 << URSEL) | (0 << USBS) | (3 << UCSZ0);
 4cc:	86 e8       	ldi	r24, 0x86	; 134
 4ce:	80 bd       	out	0x20, r24	; 32
	
	UCSRA = (1 << U2X);		//Double Speed USART
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	8b b9       	out	0x0b, r24	; 11
	
	//Interrupt Initialization
	
	UCSRB |= (1<<RXCIE); //Enable UART Reviever Interrupt
 4d4:	57 9a       	sbi	0x0a, 7	; 10
}
 4d6:	08 95       	ret

000004d8 <UART_sendCharacter>:

void UART_sendCharacter(char character)			//Send "character" over tx
{
	while(! (UCSRA & (1 << UDRE)) );			//Wait for UART controller to be ready
 4d8:	5d 9b       	sbis	0x0b, 5	; 11
 4da:	fe cf       	rjmp	.-4      	; 0x4d8 <UART_sendCharacter>
	UDR = character;
 4dc:	8c b9       	out	0x0c, r24	; 12
}
 4de:	08 95       	ret

000004e0 <UART_sendString>:

void UART_sendString(char* string)				//Send the null-terminated "string" over tx
{
 4e0:	fc 01       	movw	r30, r24
 4e2:	04 c0       	rjmp	.+8      	; 0x4ec <UART_sendString+0xc>
	int i = 0;
	while(string[i] != '\0')
	{
		while(! (UCSRA & (1 << UDRE)) );	//Wait for UART controller to be ready
 4e4:	5d 9b       	sbis	0x0b, 5	; 11
 4e6:	fe cf       	rjmp	.-4      	; 0x4e4 <UART_sendString+0x4>
		UDR = string[i];
 4e8:	8c b9       	out	0x0c, r24	; 12
 4ea:	31 96       	adiw	r30, 0x01	; 1
}

void UART_sendString(char* string)				//Send the null-terminated "string" over tx
{
	int i = 0;
	while(string[i] != '\0')
 4ec:	80 81       	ld	r24, Z
 4ee:	88 23       	and	r24, r24
 4f0:	c9 f7       	brne	.-14     	; 0x4e4 <UART_sendString+0x4>
	{
		while(! (UCSRA & (1 << UDRE)) );	//Wait for UART controller to be ready
		UDR = string[i];
		i++;
	}
}
 4f2:	08 95       	ret

000004f4 <UART_clear>:
	UCSRB |= (1<<RXCIE); //Enable UART Reviever Interrupt
}

void UART_sendCharacter(char character)			//Send "character" over tx
{
	while(! (UCSRA & (1 << UDRE)) );			//Wait for UART controller to be ready
 4f4:	5d 9b       	sbis	0x0b, 5	; 11
 4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <UART_clear>
	UDR = character;
 4f8:	8c e0       	ldi	r24, 0x0C	; 12
 4fa:	8c b9       	out	0x0c, r24	; 12
	UCSRB |= (1<<RXCIE); //Enable UART Reviever Interrupt
}

void UART_sendCharacter(char character)			//Send "character" over tx
{
	while(! (UCSRA & (1 << UDRE)) );			//Wait for UART controller to be ready
 4fc:	5d 9b       	sbis	0x0b, 5	; 11
 4fe:	fe cf       	rjmp	.-4      	; 0x4fc <UART_clear+0x8>
	UDR = character;
 500:	8d e0       	ldi	r24, 0x0D	; 13
 502:	8c b9       	out	0x0c, r24	; 12
void UART_clear(void)
{
	UART_sendCharacter(0x0c);
	UART_sendCharacter('\r');
	return;
}
 504:	08 95       	ret

00000506 <stateEval>:
action stateEval(event e);

action stateEval(event e)
{
	//cli();
	stateElement stateEvaluation = stateMatrix[currentState][e];
 506:	20 91 33 03 	lds	r18, 0x0333
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	f9 01       	movw	r30, r18
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	ee 0f       	add	r30, r30
 514:	ff 1f       	adc	r31, r31
 516:	e2 0f       	add	r30, r18
 518:	f3 1f       	adc	r31, r19
 51a:	e8 0f       	add	r30, r24
 51c:	f1 1d       	adc	r31, r1
 51e:	ee 0f       	add	r30, r30
 520:	ff 1f       	adc	r31, r31
 522:	e4 55       	subi	r30, 0x54	; 84
 524:	fd 4f       	sbci	r31, 0xFD	; 253
 526:	81 81       	ldd	r24, Z+1	; 0x01
	
	currentState = stateEvaluation.nextState;
 528:	90 81       	ld	r25, Z
 52a:	90 93 33 03 	sts	0x0333, r25
	
	//sei();
	return stateEvaluation.actionToDo;
}
 52e:	08 95       	ret

00000530 <main>:
	const unsigned char externalInterrupt = PIND2;

// Main function

int main(void)
{
 530:	af 92       	push	r10
 532:	cf 92       	push	r12
 534:	ef 92       	push	r14
 536:	0f 93       	push	r16
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	c0 e9       	ldi	r28, 0x90	; 144
 53e:	d1 e0       	ldi	r29, 0x01	; 1
	
	while(1)
	{
		switch(currentState)
 540:	80 91 33 03 	lds	r24, 0x0333
 544:	87 30       	cpi	r24, 0x07	; 7
 546:	48 f4       	brcc	.+18     	; 0x55a <main+0x2a>
 548:	83 30       	cpi	r24, 0x03	; 3
 54a:	08 f0       	brcs	.+2      	; 0x54e <main+0x1e>
 54c:	5b c0       	rjmp	.+182    	; 0x604 <main+0xd4>
 54e:	81 30       	cpi	r24, 0x01	; 1
 550:	a9 f0       	breq	.+42     	; 0x57c <main+0x4c>
 552:	82 30       	cpi	r24, 0x02	; 2
 554:	08 f0       	brcs	.+2      	; 0x558 <main+0x28>
 556:	3e c0       	rjmp	.+124    	; 0x5d4 <main+0xa4>
 558:	55 c0       	rjmp	.+170    	; 0x604 <main+0xd4>
 55a:	89 30       	cpi	r24, 0x09	; 9
 55c:	09 f4       	brne	.+2      	; 0x560 <main+0x30>
 55e:	40 c0       	rjmp	.+128    	; 0x5e0 <main+0xb0>
 560:	8a 30       	cpi	r24, 0x0A	; 10
 562:	30 f4       	brcc	.+12     	; 0x570 <main+0x40>
 564:	87 30       	cpi	r24, 0x07	; 7
 566:	c1 f1       	breq	.+112    	; 0x5d8 <main+0xa8>
 568:	88 30       	cpi	r24, 0x08	; 8
 56a:	09 f0       	breq	.+2      	; 0x56e <main+0x3e>
 56c:	41 c0       	rjmp	.+130    	; 0x5f0 <main+0xc0>
 56e:	36 c0       	rjmp	.+108    	; 0x5dc <main+0xac>
 570:	8a 30       	cpi	r24, 0x0A	; 10
 572:	c1 f1       	breq	.+112    	; 0x5e4 <main+0xb4>
 574:	8b 30       	cpi	r24, 0x0B	; 11
 576:	09 f0       	breq	.+2      	; 0x57a <main+0x4a>
 578:	3b c0       	rjmp	.+118    	; 0x5f0 <main+0xc0>
 57a:	38 c0       	rjmp	.+112    	; 0x5ec <main+0xbc>
			case POWER_ON:
				break;
			case INITIALIZE:
				
				//Data Direction Settings
				DDRB |= (1<<led1 | 1<<lcd_E | 1<<lcd_data | 1<<lcd_latch | 1<<lcd_shift | 1<<lcd_RS | 1<<lcd_RW);
 57c:	87 b3       	in	r24, 0x17	; 23
 57e:	8e 6f       	ori	r24, 0xFE	; 254
 580:	87 bb       	out	0x17, r24	; 23
				DDRB &= ~(1<<lcd_busyFlag);
 582:	b8 98       	cbi	0x17, 0	; 23
				DDRD &= ~(1<<buttonUp | 1<<buttonDown | 1<<buttonSelect | 1<<buttonBack | 1<<externalInterrupt);
 584:	81 b3       	in	r24, 0x11	; 17
 586:	83 78       	andi	r24, 0x83	; 131
 588:	81 bb       	out	0x11, r24	; 17
				
				//Port Initialization
				PORTD |= (1<<buttonUp | 1<<buttonDown | 1<<buttonSelect | 1<<buttonBack | 1<<externalInterrupt);
 58a:	82 b3       	in	r24, 0x12	; 18
 58c:	8c 67       	ori	r24, 0x7C	; 124
 58e:	82 bb       	out	0x12, r24	; 18
				
				//LCD Initialization
				LCD_init(&PORTB,lcd_data,lcd_shift,lcd_latch,lcd_RS,lcd_RW,lcd_E,lcd_busyFlag);
 590:	88 e3       	ldi	r24, 0x38	; 56
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	63 e0       	ldi	r22, 0x03	; 3
 596:	45 e0       	ldi	r20, 0x05	; 5
 598:	24 e0       	ldi	r18, 0x04	; 4
 59a:	06 e0       	ldi	r16, 0x06	; 6
 59c:	e7 e0       	ldi	r30, 0x07	; 7
 59e:	ee 2e       	mov	r14, r30
 5a0:	72 e0       	ldi	r23, 0x02	; 2
 5a2:	c7 2e       	mov	r12, r23
 5a4:	aa 24       	eor	r10, r10
 5a6:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_init>
				
				//UART Initialization
				UART_init();
 5aa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <UART_init>
				
				//Global Interrupt initialization
				sei();
 5ae:	78 94       	sei
				
				//Enable external interrupts on INT0
				GICR |= (1<<INT0);
 5b0:	8b b7       	in	r24, 0x3b	; 59
 5b2:	80 64       	ori	r24, 0x40	; 64
 5b4:	8b bf       	out	0x3b, r24	; 59
				
				//External Interrupt initialization for INT0/PIND2 - Any Edge
				//MCUCR |= (1<<ISC01);
				MCUCR &= ~(1<<ISC00 | 1<<ISC01);
 5b6:	85 b7       	in	r24, 0x35	; 53
 5b8:	8c 7f       	andi	r24, 0xFC	; 252
 5ba:	85 bf       	out	0x35, r24	; 53
				
				//Welcome Message
				LCD_sendString(WELCOME_MESSAGE);
 5bc:	83 e1       	ldi	r24, 0x13	; 19
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendString>
 5c4:	88 e9       	ldi	r24, 0x98	; 152
 5c6:	9a e3       	ldi	r25, 0x3A	; 58
 5c8:	fe 01       	movw	r30, r28
 5ca:	31 97       	sbiw	r30, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <main+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5d0:	d9 f7       	brne	.-10     	; 0x5c8 <main+0x98>
 5d2:	18 c0       	rjmp	.+48     	; 0x604 <main+0xd4>
				_delay_ms(1500);
				
				break;
			case MENU_LOG:
				LCD_draw(DRAW_MENU_LOG);
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	07 c0       	rjmp	.+14     	; 0x5e6 <main+0xb6>
			case LOG_STORE:
				break;
			case LOG_INPUT:
				break;
			case LOG_STOP:
				LCD_draw(DRAW_LOG_STOP);
 5d8:	86 e0       	ldi	r24, 0x06	; 6
 5da:	05 c0       	rjmp	.+10     	; 0x5e6 <main+0xb6>
				break;
			case MENU_SETTINGS:
				LCD_draw(DRAW_MENU_SETTINGS);
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	03 c0       	rjmp	.+6      	; 0x5e6 <main+0xb6>
				break;
			case MENU_TRANSFER:
				LCD_draw(DRAW_MENU_TRANSFER);
 5e0:	83 e0       	ldi	r24, 0x03	; 3
 5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <main+0xb6>
				break;
			case MENU_CALIBRATION:
				LCD_draw(DRAW_MENU_CALIBRATION);
 5e4:	84 e0       	ldi	r24, 0x04	; 4
 5e6:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_draw>
 5ea:	0c c0       	rjmp	.+24     	; 0x604 <main+0xd4>
				break;
			case MENU_TIME:
				LCD_draw(DRAW_MENU_TIME);
 5ec:	85 e0       	ldi	r24, 0x05	; 5
 5ee:	fb cf       	rjmp	.-10     	; 0x5e6 <main+0xb6>
				break;
			default:
				UART_sendString("Fatal Error: Outside defined state definitions");
 5f0:	83 e2       	ldi	r24, 0x23	; 35
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_sendString>
				LCD_clear();
 5f8:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("Fatal Error:    switch state err");
 5fc:	82 e5       	ldi	r24, 0x52	; 82
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendString>
				break;
		}
		if(!INT0_called)
 604:	80 91 35 03 	lds	r24, 0x0335
 608:	88 23       	and	r24, r24
 60a:	91 f4       	brne	.+36     	; 0x630 <main+0x100>
action stateEval(event e)
{
	//cli();
	stateElement stateEvaluation = stateMatrix[currentState][e];
	
	currentState = stateEvaluation.nextState;
 60c:	80 91 33 03 	lds	r24, 0x0333
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	fc 01       	movw	r30, r24
 614:	63 e0       	ldi	r22, 0x03	; 3
 616:	ee 0f       	add	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	6a 95       	dec	r22
 61c:	e1 f7       	brne	.-8      	; 0x616 <main+0xe6>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	e8 0f       	add	r30, r24
 624:	f9 1f       	adc	r31, r25
 626:	e4 55       	subi	r30, 0x54	; 84
 628:	fd 4f       	sbci	r31, 0xFD	; 253
 62a:	80 85       	ldd	r24, Z+8	; 0x08
 62c:	80 93 33 03 	sts	0x0333, r24
		{
			stateEval(DEFAULT);
		}
		INT0_called = 0;
 630:	10 92 35 03 	sts	0x0335, r1
 634:	85 cf       	rjmp	.-246    	; 0x540 <main+0x10>

00000636 <__vector_13>:
	}
}

ISR(USART_RXC_vect)
{
 636:	1f 92       	push	r1
 638:	0f 92       	push	r0
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	0f 92       	push	r0
 63e:	11 24       	eor	r1, r1
 640:	2f 93       	push	r18
 642:	3f 93       	push	r19
 644:	4f 93       	push	r20
 646:	5f 93       	push	r21
 648:	6f 93       	push	r22
 64a:	7f 93       	push	r23
 64c:	8f 93       	push	r24
 64e:	9f 93       	push	r25
 650:	af 93       	push	r26
 652:	bf 93       	push	r27
 654:	ef 93       	push	r30
 656:	ff 93       	push	r31
	UART_buffer[UART_index] = UDR;
 658:	a0 91 77 03 	lds	r26, 0x0377
 65c:	b0 91 78 03 	lds	r27, 0x0378
 660:	8c b1       	in	r24, 0x0c	; 12
 662:	fd 01       	movw	r30, r26
 664:	e9 5b       	subi	r30, 0xB9	; 185
 666:	fc 4f       	sbci	r31, 0xFC	; 252
 668:	80 83       	st	Z, r24
	UCSRB |= (1<<RXCIE); //Enable UART Reviever Interrupt
}

void UART_sendCharacter(char character)			//Send "character" over tx
{
	while(! (UCSRA & (1 << UDRE)) );			//Wait for UART controller to be ready
 66a:	5d 9b       	sbis	0x0b, 5	; 11
 66c:	fe cf       	rjmp	.-4      	; 0x66a <__vector_13+0x34>
	UDR = character;
 66e:	8c b9       	out	0x0c, r24	; 12
	UART_sendCharacter(UART_buffer[UART_index]);
	if(UART_buffer[UART_index] == '\r' || UART_index>=39)
 670:	8d 30       	cpi	r24, 0x0D	; 13
 672:	19 f0       	breq	.+6      	; 0x67a <__vector_13+0x44>
 674:	a7 32       	cpi	r26, 0x27	; 39
 676:	b1 05       	cpc	r27, r1
 678:	d0 f0       	brcs	.+52     	; 0x6ae <__vector_13+0x78>
	{
		UART_buffer[UART_index]='\0';
 67a:	a9 5b       	subi	r26, 0xB9	; 185
 67c:	bc 4f       	sbci	r27, 0xFC	; 252
 67e:	1c 92       	st	X, r1
		LCD_clear();
 680:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
		LCD_sendString(&UART_buffer[0]);
 684:	87 e4       	ldi	r24, 0x47	; 71
 686:	93 e0       	ldi	r25, 0x03	; 3
 688:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendString>
		//parseStringInput(&UART_buffer[0]);	//not yet defined
		UART_clear();
 68c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <UART_clear>
		if(UART_index>=39)
 690:	80 91 77 03 	lds	r24, 0x0377
 694:	90 91 78 03 	lds	r25, 0x0378
 698:	87 97       	sbiw	r24, 0x27	; 39
 69a:	20 f0       	brcs	.+8      	; 0x6a4 <__vector_13+0x6e>
		{
			UART_sendString("Buffer Overflow!");
 69c:	83 e7       	ldi	r24, 0x73	; 115
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_sendString>
		}
		UART_index = 0;
 6a4:	10 92 78 03 	sts	0x0378, r1
 6a8:	10 92 77 03 	sts	0x0377, r1
 6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <__vector_13+0x82>
	}
	else
	{
		UART_index++;
 6ae:	11 96       	adiw	r26, 0x01	; 1
 6b0:	b0 93 78 03 	sts	0x0378, r27
 6b4:	a0 93 77 03 	sts	0x0377, r26
	}
	if(UART_buffer[UART_index-1] == 8)	//backspace
 6b8:	20 91 77 03 	lds	r18, 0x0377
 6bc:	30 91 78 03 	lds	r19, 0x0378
 6c0:	f9 01       	movw	r30, r18
 6c2:	ea 5b       	subi	r30, 0xBA	; 186
 6c4:	fc 4f       	sbci	r31, 0xFC	; 252
 6c6:	80 81       	ld	r24, Z
 6c8:	88 30       	cpi	r24, 0x08	; 8
 6ca:	31 f4       	brne	.+12     	; 0x6d8 <__vector_13+0xa2>
	{
		UART_index -= 2;
 6cc:	22 50       	subi	r18, 0x02	; 2
 6ce:	30 40       	sbci	r19, 0x00	; 0
 6d0:	30 93 78 03 	sts	0x0378, r19
 6d4:	20 93 77 03 	sts	0x0377, r18
	}
}
 6d8:	ff 91       	pop	r31
 6da:	ef 91       	pop	r30
 6dc:	bf 91       	pop	r27
 6de:	af 91       	pop	r26
 6e0:	9f 91       	pop	r25
 6e2:	8f 91       	pop	r24
 6e4:	7f 91       	pop	r23
 6e6:	6f 91       	pop	r22
 6e8:	5f 91       	pop	r21
 6ea:	4f 91       	pop	r20
 6ec:	3f 91       	pop	r19
 6ee:	2f 91       	pop	r18
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <__vector_1>:

ISR(INT0_vect)	//Intterrupt for button presses (falling edge)
{
 6fa:	1f 92       	push	r1
 6fc:	0f 92       	push	r0
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	0f 92       	push	r0
 702:	11 24       	eor	r1, r1
 704:	2f 93       	push	r18
 706:	3f 93       	push	r19
 708:	4f 93       	push	r20
 70a:	5f 93       	push	r21
 70c:	6f 93       	push	r22
 70e:	7f 93       	push	r23
 710:	8f 93       	push	r24
 712:	9f 93       	push	r25
 714:	af 93       	push	r26
 716:	bf 93       	push	r27
 718:	ef 93       	push	r30
 71a:	ff 93       	push	r31
 71c:	8c ed       	ldi	r24, 0xDC	; 220
 71e:	95 e0       	ldi	r25, 0x05	; 5
 720:	20 e9       	ldi	r18, 0x90	; 144
 722:	31 e0       	ldi	r19, 0x01	; 1
 724:	f9 01       	movw	r30, r18
 726:	31 97       	sbiw	r30, 0x01	; 1
 728:	f1 f7       	brne	.-4      	; 0x726 <__vector_1+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 72a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 72c:	d9 f7       	brne	.-10     	; 0x724 <__vector_1+0x2a>
	if(ButtonPressed)
	{*/
	_delay_ms(150);
	event eventOccured = -1;
	int buttonsPressed = 0;
	INT0_called = 1;
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	80 93 35 03 	sts	0x0335, r24
	
	
	
	if(bit_is_clear(PIND,buttonUp))
 734:	86 99       	sbic	0x10, 6	; 16
 736:	04 c0       	rjmp	.+8      	; 0x740 <__vector_1+0x46>
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	03 c0       	rjmp	.+6      	; 0x746 <__vector_1+0x4c>
 740:	2f ef       	ldi	r18, 0xFF	; 255
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	90 e0       	ldi	r25, 0x00	; 0
	{
		eventOccured = UP;
		buttonsPressed++;
	}
	if(bit_is_clear(PIND,buttonDown))
 746:	85 99       	sbic	0x10, 5	; 16
 748:	02 c0       	rjmp	.+4      	; 0x74e <__vector_1+0x54>
	{
		eventOccured = DOWN;
		buttonsPressed++;
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	21 e0       	ldi	r18, 0x01	; 1
	}
	if(bit_is_clear(PIND,buttonSelect))
 74e:	84 99       	sbic	0x10, 4	; 16
 750:	02 c0       	rjmp	.+4      	; 0x756 <__vector_1+0x5c>
	{
		eventOccured = SELECT;
		buttonsPressed++;
 752:	01 96       	adiw	r24, 0x01	; 1
 754:	22 e0       	ldi	r18, 0x02	; 2
	}
	if(bit_is_clear(PIND,buttonBack))
 756:	83 99       	sbic	0x10, 3	; 16
 758:	02 c0       	rjmp	.+4      	; 0x75e <__vector_1+0x64>
	{
		eventOccured = BACK;
		buttonsPressed++;
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	23 e0       	ldi	r18, 0x03	; 3
	}
	
	if(buttonsPressed > 1)
 75e:	82 30       	cpi	r24, 0x02	; 2
 760:	91 05       	cpc	r25, r1
 762:	2c f0       	brlt	.+10     	; 0x76e <__vector_1+0x74>
	{
		//Future error reporting system
		LCD_clear();
 764:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
		LCD_sendString("ERROR - > Button");
 768:	84 e8       	ldi	r24, 0x84	; 132
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	06 c0       	rjmp	.+12     	; 0x77a <__vector_1+0x80>
		return;
	}
	else if(buttonsPressed == 0)
 76e:	89 2b       	or	r24, r25
 770:	39 f4       	brne	.+14     	; 0x780 <__vector_1+0x86>
	{
		LCD_clear();
 772:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
		LCD_sendString("ERROR - < Button");
 776:	85 e9       	ldi	r24, 0x95	; 149
 778:	91 e0       	ldi	r25, 0x01	; 1
 77a:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendString>
 77e:	a6 c0       	rjmp	.+332    	; 0x8cc <__stack+0x6d>
		return;
	}
	
	if(eventOccured >= 0 && eventOccured < numberOfButtons)
 780:	24 30       	cpi	r18, 0x04	; 4
 782:	08 f0       	brcs	.+2      	; 0x786 <__vector_1+0x8c>
 784:	a3 c0       	rjmp	.+326    	; 0x8cc <__stack+0x6d>
action stateEval(event e);

action stateEval(event e)
{
	//cli();
	stateElement stateEvaluation = stateMatrix[currentState][e];
 786:	80 91 33 03 	lds	r24, 0x0333
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	fc 01       	movw	r30, r24
 78e:	ee 0f       	add	r30, r30
 790:	ff 1f       	adc	r31, r31
 792:	ee 0f       	add	r30, r30
 794:	ff 1f       	adc	r31, r31
 796:	e8 0f       	add	r30, r24
 798:	f9 1f       	adc	r31, r25
 79a:	e2 0f       	add	r30, r18
 79c:	f1 1d       	adc	r31, r1
 79e:	ee 0f       	add	r30, r30
 7a0:	ff 1f       	adc	r31, r31
 7a2:	e4 55       	subi	r30, 0x54	; 84
 7a4:	fd 4f       	sbci	r31, 0xFD	; 253
 7a6:	91 81       	ldd	r25, Z+1	; 0x01
	
	currentState = stateEvaluation.nextState;
 7a8:	80 81       	ld	r24, Z
 7aa:	80 93 33 03 	sts	0x0333, r24
	{
		switch (stateEval(eventOccured))	//call action
 7ae:	92 30       	cpi	r25, 0x02	; 2
 7b0:	51 f1       	breq	.+84     	; 0x806 <__vector_1+0x10c>
 7b2:	93 30       	cpi	r25, 0x03	; 3
 7b4:	30 f4       	brcc	.+12     	; 0x7c2 <__vector_1+0xc8>
 7b6:	99 23       	and	r25, r25
 7b8:	69 f0       	breq	.+26     	; 0x7d4 <__vector_1+0xda>
 7ba:	91 30       	cpi	r25, 0x01	; 1
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <__vector_1+0xc6>
 7be:	73 c0       	rjmp	.+230    	; 0x8a6 <__stack+0x47>
 7c0:	0e c0       	rjmp	.+28     	; 0x7de <__vector_1+0xe4>
 7c2:	94 30       	cpi	r25, 0x04	; 4
 7c4:	09 f4       	brne	.+2      	; 0x7c8 <__vector_1+0xce>
 7c6:	47 c0       	rjmp	.+142    	; 0x856 <__vector_1+0x15c>
 7c8:	94 30       	cpi	r25, 0x04	; 4
 7ca:	88 f1       	brcs	.+98     	; 0x82e <__vector_1+0x134>
 7cc:	95 30       	cpi	r25, 0x05	; 5
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <__vector_1+0xd8>
 7d0:	6a c0       	rjmp	.+212    	; 0x8a6 <__stack+0x47>
 7d2:	55 c0       	rjmp	.+170    	; 0x87e <__stack+0x1f>
		{
			case NILACTION:
				UART_sendString("NILACTION Called\n");
 7d4:	86 ea       	ldi	r24, 0xA6	; 166
 7d6:	91 e0       	ldi	r25, 0x01	; 1
 7d8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_sendString>
 7dc:	77 c0       	rjmp	.+238    	; 0x8cc <__stack+0x6d>
				//LCD_clear();
				//LCD_sendString("NILACTION Called");
				//_delay_ms(1000);
				break;
			case Log_save:
				UART_sendString("Log_save Called\n");
 7de:	88 eb       	ldi	r24, 0xB8	; 184
 7e0:	91 e0       	ldi	r25, 0x01	; 1
 7e2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_sendString>
				LCD_clear();
 7e6:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("Log_save Called");
 7ea:	89 ec       	ldi	r24, 0xC9	; 201
 7ec:	91 e0       	ldi	r25, 0x01	; 1
 7ee:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendString>
 7f2:	80 e1       	ldi	r24, 0x10	; 16
 7f4:	97 e2       	ldi	r25, 0x27	; 39
 7f6:	20 e9       	ldi	r18, 0x90	; 144
 7f8:	31 e0       	ldi	r19, 0x01	; 1
 7fa:	f9 01       	movw	r30, r18
 7fc:	31 97       	sbiw	r30, 0x01	; 1
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <__vector_1+0x102>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 800:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 802:	d9 f7       	brne	.-10     	; 0x7fa <__vector_1+0x100>
 804:	63 c0       	rjmp	.+198    	; 0x8cc <__stack+0x6d>
				_delay_ms(1000);
				break;
			case Log_delete:
				UART_sendString("Log_delete Called\n");
 806:	89 ed       	ldi	r24, 0xD9	; 217
 808:	91 e0       	ldi	r25, 0x01	; 1
 80a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_sendString>
				LCD_clear();
 80e:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("Log_delete      Called");
 812:	8c ee       	ldi	r24, 0xEC	; 236
 814:	91 e0       	ldi	r25, 0x01	; 1
 816:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendString>
 81a:	80 e1       	ldi	r24, 0x10	; 16
 81c:	97 e2       	ldi	r25, 0x27	; 39
 81e:	20 e9       	ldi	r18, 0x90	; 144
 820:	31 e0       	ldi	r19, 0x01	; 1
 822:	f9 01       	movw	r30, r18
 824:	31 97       	sbiw	r30, 0x01	; 1
 826:	f1 f7       	brne	.-4      	; 0x824 <__vector_1+0x12a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 828:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 82a:	d9 f7       	brne	.-10     	; 0x822 <__vector_1+0x128>
 82c:	4f c0       	rjmp	.+158    	; 0x8cc <__stack+0x6d>
				_delay_ms(1000);
				break;
			case Menu_transfer:
				UART_sendString("Menu_transfer Called\n");
 82e:	83 e0       	ldi	r24, 0x03	; 3
 830:	92 e0       	ldi	r25, 0x02	; 2
 832:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_sendString>
				LCD_clear();
 836:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("Menu_transfer   Called");
 83a:	89 e1       	ldi	r24, 0x19	; 25
 83c:	92 e0       	ldi	r25, 0x02	; 2
 83e:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendString>
 842:	80 e1       	ldi	r24, 0x10	; 16
 844:	97 e2       	ldi	r25, 0x27	; 39
 846:	20 e9       	ldi	r18, 0x90	; 144
 848:	31 e0       	ldi	r19, 0x01	; 1
 84a:	f9 01       	movw	r30, r18
 84c:	31 97       	sbiw	r30, 0x01	; 1
 84e:	f1 f7       	brne	.-4      	; 0x84c <__vector_1+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 850:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 852:	d9 f7       	brne	.-10     	; 0x84a <__vector_1+0x150>
 854:	3b c0       	rjmp	.+118    	; 0x8cc <__stack+0x6d>
				_delay_ms(1000);
				break;
			case Menu_calibrate:
				UART_sendString("Menu_calibrate Called\n");
 856:	80 e3       	ldi	r24, 0x30	; 48
 858:	92 e0       	ldi	r25, 0x02	; 2
 85a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_sendString>
				LCD_clear();
 85e:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("Menu_calibrate  Called");
 862:	87 e4       	ldi	r24, 0x47	; 71
 864:	92 e0       	ldi	r25, 0x02	; 2
 866:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendString>
 86a:	80 e1       	ldi	r24, 0x10	; 16
 86c:	97 e2       	ldi	r25, 0x27	; 39
 86e:	20 e9       	ldi	r18, 0x90	; 144
 870:	31 e0       	ldi	r19, 0x01	; 1
 872:	f9 01       	movw	r30, r18
 874:	31 97       	sbiw	r30, 0x01	; 1
 876:	f1 f7       	brne	.-4      	; 0x874 <__stack+0x15>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 878:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 87a:	d9 f7       	brne	.-10     	; 0x872 <__stack+0x13>
 87c:	27 c0       	rjmp	.+78     	; 0x8cc <__stack+0x6d>
				_delay_ms(1000);
				break;
			case Menu_setTime:
				UART_sendString("Menu_setTime Called\n");
 87e:	8e e5       	ldi	r24, 0x5E	; 94
 880:	92 e0       	ldi	r25, 0x02	; 2
 882:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_sendString>
				LCD_clear();
 886:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("Menu_setTime    Called");
 88a:	83 e7       	ldi	r24, 0x73	; 115
 88c:	92 e0       	ldi	r25, 0x02	; 2
 88e:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendString>
 892:	80 e1       	ldi	r24, 0x10	; 16
 894:	97 e2       	ldi	r25, 0x27	; 39
 896:	20 e9       	ldi	r18, 0x90	; 144
 898:	31 e0       	ldi	r19, 0x01	; 1
 89a:	f9 01       	movw	r30, r18
 89c:	31 97       	sbiw	r30, 0x01	; 1
 89e:	f1 f7       	brne	.-4      	; 0x89c <__stack+0x3d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8a2:	d9 f7       	brne	.-10     	; 0x89a <__stack+0x3b>
 8a4:	13 c0       	rjmp	.+38     	; 0x8cc <__stack+0x6d>
				_delay_ms(1000);
				break;
			default:
				UART_sendString("default Error\n");
 8a6:	8a e8       	ldi	r24, 0x8A	; 138
 8a8:	92 e0       	ldi	r25, 0x02	; 2
 8aa:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_sendString>
				LCD_clear();
 8ae:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_clear>
				LCD_sendString("NILACTION Called");
 8b2:	89 e9       	ldi	r24, 0x99	; 153
 8b4:	92 e0       	ldi	r25, 0x02	; 2
 8b6:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_sendString>
 8ba:	80 e1       	ldi	r24, 0x10	; 16
 8bc:	97 e2       	ldi	r25, 0x27	; 39
 8be:	20 e9       	ldi	r18, 0x90	; 144
 8c0:	31 e0       	ldi	r19, 0x01	; 1
 8c2:	f9 01       	movw	r30, r18
 8c4:	31 97       	sbiw	r30, 0x01	; 1
 8c6:	f1 f7       	brne	.-4      	; 0x8c4 <__stack+0x65>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8ca:	d9 f7       	brne	.-10     	; 0x8c2 <__stack+0x63>
				_delay_ms(1000);
				break;
		}
	}
	//}
}
 8cc:	ff 91       	pop	r31
 8ce:	ef 91       	pop	r30
 8d0:	bf 91       	pop	r27
 8d2:	af 91       	pop	r26
 8d4:	9f 91       	pop	r25
 8d6:	8f 91       	pop	r24
 8d8:	7f 91       	pop	r23
 8da:	6f 91       	pop	r22
 8dc:	5f 91       	pop	r21
 8de:	4f 91       	pop	r20
 8e0:	3f 91       	pop	r19
 8e2:	2f 91       	pop	r18
 8e4:	0f 90       	pop	r0
 8e6:	0f be       	out	0x3f, r0	; 63
 8e8:	0f 90       	pop	r0
 8ea:	1f 90       	pop	r1
 8ec:	18 95       	reti

000008ee <_exit>:
 8ee:	f8 94       	cli

000008f0 <__stop_program>:
 8f0:	ff cf       	rjmp	.-2      	; 0x8f0 <__stop_program>
